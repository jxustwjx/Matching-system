// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>
#include <thrift/TToString.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>
#include <unistd.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;
using namespace std;


using namespace std;

struct Task  //包含用户信息和其他参数，注一般任务设置的是回调函数
{
    User user;
    string type;
};

struct MessageQueue //任务队列（临界资源），互斥量，条件变量（搭配互斥量阻塞和解除阻塞线程）
{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

//生产者线程，每次client端调用一次函数，server端产生一个线程处理函数，但有销毁。可以定义一个线程池提高效率
class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            unique_lock<mutex> lck(message_queue.m); //加锁互斥，这种锁超出作用域会自动释放
            message_queue.q.push({user, "add"});
            message_queue.cv.notify_all(); // V操作唤醒被P的堵塞队列的头结点

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            unique_lock<mutex> lck(message_queue.m); //加锁互斥
            message_queue.q.push({user, "remove"});
            message_queue.cv.notify_all(); // V操作唤醒被P的堵塞队列的头结点

            return 0;
        }
};

class Pool //匹配池
{
    public:
        void add(User user)
        {
            users.push_back(user); //插入用户队列，同时等待时间为0
            wt.push_back(0);
        }

        void remove(User user)
        {
            //uint32_t 无符号32位整形，防止报warning，项目最好0error，0warning
            for (uint32_t i = 0; i < users.size(); i++)
                if (users[i].id == user.id)
                {
                    users.erase(users.begin() + i);
                    wt.erase(wt.begin() + i);
                    break;
                }
        }

        bool check_match(uint32_t i, uint32_t j)
        {
            auto a = users[i], b = users[j];
            int dt = abs(a.score - b.score);
            int a_max_dif = wt[i] * 50, b_max_dif = wt[j] * 50; //a,b的匹配范围，这种匹配方式类似王者荣耀巅峰赛的匹配机制

            return dt <= a_max_dif && dt <= b_max_dif;  //两个用户的时间差既在a的匹配范围中，又在b的匹配范围中即匹配成功
        }

        void match()
        {
            //每次匹配给用户等待时间加一秒
            for(uint32_t i = 0; i < wt.size(); i ++) //每次发生匹配，让用户等待时间加1，这个可以类似秒数，但实际又不是秒数
                wt[i] ++;
            while (users.size() > 1)
            {
                bool flag = true;
                for (uint32_t i = 0; i < users.size(); i++)
                {
                    for (uint32_t j = i + 1; j < users.size(); j ++)
                    {
                        if (check_match(i, j))
                        {
                            auto a = users[i], b = users[j];
                            //先删前面的，会影响后面的，所以先删后面的
                            users.erase(users.begin() + j);
                            users.erase(users.begin() + i);
                            wt.erase(wt.begin() + j);
                            wt.erase(wt.begin() + i);
                            save_result(a.id, b.id);
                            flag = false;
                        }
                    }
                    if (!flag) break;
                }
                if (flag) break; //没有产生匹配，就跳出，不然一直循环
            }
        }

        void save_result(int a, int b)
        {
            cout << "Match Result:" << a << " " << b << endl;
            
            //这个服务器既是匹配的server端，也是存储的client端
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();
                int res = client.save_data("acs_1836", "3493ab7b", a, b);
                if (!res) puts("success");
                else puts("failed");
                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }

    private:
        vector<User> users; //用户队列
        vector<int> wt;     //用户等待时间队列，和用户队列下标一一匹配，当然也可以放进用户信息中

}pool;

void consume_task() //消费线程
{
    while(true)
    {
        unique_lock<mutex> lck(message_queue.m); //加锁互斥
        if (message_queue.q.empty())
        {
            //message_queue.cv.wait(lck); // P操作，若无资源就把该线程放入堵塞队列
            lck.unlock(); //释放锁，让其他线程执行
            pool.match(); //消息队列为空，说明匹配池可能有数据，去匹配
            sleep(1);     //隔一秒匹配一次
        }
        else
        {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock(); //虽然unique_lock会自动解锁，但是现在已经不影响临界资源了，可以提前解锁，让其他线程运行，提高效率

            if (task.type == "add") pool.add(task.user);
            else if (task.type == "remove") pool.remove(task.user);
        }
    }
}

class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*cout << "Incoming connection\n";
              cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
              cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
              cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
              cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";*/
            return new MatchHandler;
        }
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};

//主线程负责启动服务和创建一个消费者线程
//消费者线程负责消费任务队列里面的任务
//多个生产者线程负责往任务队列添加任务

int main(int argc, char **argv) {
    //多线程，client端每调用一次函数，server端产生一个线程来处理这个任务
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    cout << "Start Match Server" << endl;

    thread matching_thread(consume_task); //创建消费者线程

    server.serve();
    return 0;
}
